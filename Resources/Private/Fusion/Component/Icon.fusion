prototype(Garagist.Fontawesome:Component.Icon) < prototype(Neos.Fusion:Component) {
    @propTypes {
        style = ${PropTypes.oneOf(['brands', 'duotone', 'light', 'regular', 'solid', 'thin']).isRequired}
        icon = ${PropTypes.string.isRequired}
        title = ${PropTypes.string}

        // CSS Class based
        size = ${PropTypes.oneOf(['2xs', 'xs', 'sm', 'lg', 'xl', '2xl', '1x', '2x', '3x', '4x', '5x', '6x', '7x', '8x', '9x', '10x', ''])}
        fixedWidth = ${PropTypes.boolean}
        pull = ${PropTypes.oneOf(['left', 'right', ''])}
        border = ${PropTypes.boolean}
        inverse = ${PropTypes.boolean}
        animation = ${PropTypes.oneOf(['beat', 'bounce', 'fade', 'beat-fade', 'flip', 'shake', 'spin', 'spin-reverse', 'spin-pulse', ''])}
        stackSize = ${PropTypes.oneOf([1, 2])}

        // Style transform based
        rotate = ${PropTypes.anyOf(PropTypes.float, PropTypes.integer)}
        flip = ${PropTypes.oneOf(['horizontal', 'vertical', 'both', ''])}

        // For duotone icons
        swapOpacity = ${PropTypes.boolean}
        // Opacity between 0 and 1, e.g. 0.4
        primaryOpacity = ${PropTypes.regex('/^(0(\.\d+)?|1(\.0+)?)$/')}
        secondaryOpacity = ${PropTypes.regex('/^(0(\.\d+)?|1(\.0+)?)$/')}

        // Any valid CSS color value
        primaryColor = ${PropTypes.string}
        secondaryColor = ${PropTypes.string}

        iconLocation = ${PropTypes.string.isRequired}
        file = ${PropTypes.fileExists.isRequired}
        iconPrefix = ${PropTypes.string.isRequired}
    }

    @styleguide {
        title = 'Font Awesome Icon'
        props {
            style = 'brands'
            icon = 'neos'
            size = '10x'
            fixedWidth = false
            pull = ''
            border = false
            inverse = false
            animation = ''
            flip = ''
            swapOpacity = false
            primaryColor = ''
            secondaryColor = ''
        }
        propSets {
            'attributes with strings' {
                attributes {
                    class = 'neos-icon'
                    style = 'color:#00adee'
                }
            }
            'attributes with arrays' {
                attributes {
                    class = ${['neos-icon', 'neos-icon--brand', null, false]}
                    style = ${['color:#00adee', 'background:#fff', null, false]}
                }
            }
            'attributes with DataStructure' {
                attributes {
                    class = Neos.Fusion:DataStructure {
                        base = 'neos-icon'
                        modifier = 'neos-icon--brand'
                        null = null
                        false = false
                    }
                    style = Neos.Fusion:DataStructure {
                        color = 'color:#00adee'
                        background = 'background:#fff'
                        null = null
                        false = false
                    }
                }
            }
        }
    }

    style = null

    icon = null

    title = null

    // CSS Class based
    size = null
    fixedWidth = false
    pull = null
    border = false
    animation = null
    inverse = false
    stackSize = null

    // Style transform based
    rotate = null
    flip = null

    // For duotone icons
    swapOpacity = false
    // Opacity between 0 and 1, e.g. 0.4
    primaryOpacity = null 
    secondaryOpacity = null
    // Any valid CSS color value
    primaryColor = null 
    secondaryColor = null
    // Set options only for duotone icons
    swapOpacity.@process.onlyForDuotoneIcons = ${this.style == 'duotone' ? value : null}
    primaryOpacity.@process.onlyForDuotoneIcons = ${this.style == 'duotone' ? value : null}
    secondaryOpacity.@process.onlyForDuotoneIcons = ${this.style == 'duotone' ? value : null}
    primaryColor.@process.onlyForDuotoneIcons = ${this.style == 'duotone' ? value : null}
    secondaryColor.@process.onlyForDuotoneIcons = ${this.style == 'duotone' ? value : null}

    attributes = Neos.Fusion:DataStructure {
        aria-hidden = 'true'
        focusable = 'false'
        role = 'img'
        // Can be a string, array or a DataStructure
        style = null
        // Can be a string, array or a DataStructure
        class = null
    }

    iconLocation = ${Configuration.setting('Garagist.Fontawesome.iconLocation')}
    file = ${'resource://' + this.iconLocation + '/' + this.style + '/' + this.icon + '.svg'}

    // Internal
    iconPrefix = 'fa'
    flipProps = Neos.Fusion:DataStructure {
        horizontal = 'scale(-1, 1)'
        vertical = 'scale(1, -1)'
        both = 'scale(-1, -1)'
    }

    renderer = Neos.Fusion:Augmenter {
        @apply {
            attributes = ${props.attributes}
            overwrite = Neos.Fusion:DataStructure {
                title = ${props.title}
                class = Neos.Fusion:DataStructure {
                    class = ${Type.isArray(props.attributes.class) ? Array.join(Array.filter(props.attributes.class, item => !!item), ' ') : props.attributes.class}
                    baseClass = ${'svg-inline--' + props.iconPrefix}
                    size = ${props.size ? props.iconPrefix + '-' + props.size : null}
                    fixedWidth = ${props.fixedWidth ? props.iconPrefix + '-fw' : null}
                    pull = ${props.pull ? props.iconPrefix + '-pull-' + props.pull : null}
                    border = ${props.border ? props.iconPrefix + '-border' : null}
                    animation = ${props.animation ? props.iconPrefix + '-' + props.animation : null}
                    inverse = ${props.inverse ? props.iconPrefix + '-inverse' : null}
                    stackSize = ${props.stackSize ? props.iconPrefix + '-stack-' + props.stackSize + 'x' : null}
                    swapOpacity = ${props.swapOpacity ? props.iconPrefix + '-swap-opacity' : null}
                    @process.toString = ${Array.join(Array.filter(value, item => !!item), ' ')}
                }
                style = Neos.Fusion:Component {
                    rotate = ${Type.isNumeric(props.rotate) ? 'rotate(' + props.rotate + 'deg)' : null}
                    flip = ${props.flipProps[props.flip]}
                    transform = ${[this.rotate, this.flip]}
                    transform.@process.toString = ${Array.isEmpty(Array.filter(value, item => !!item)) ? null : 'transform:' + Array.join(value, ' ')}
                    primaryOpacity = ${Type.isNumeric(props.primaryOpacity) ? '--fa-primary-opacity:' + props.primaryOpacity : null}
                    secondaryOpacity = ${Type.isNumeric(props.secondaryOpacity) ? '--fa-secondary-opacity:' + props.secondaryOpacity : null}
                    primaryColor = ${props.primaryColor ? '--fa-primary-color:' + props.primaryColor : null}
                    secondaryColor = ${props.secondaryColor ? '--fa-secondary-color:' + props.secondaryColor : null}
                    style = ${props.attributes.style}

                    renderer = Neos.Fusion:DataStructure {
                        transform = ${props.transform}
                        primaryOpacity= ${props.primaryOpacity}
                        secondaryOpacity= ${props.secondaryOpacity}
                        primaryColor= ${props.primaryColor}
                        secondaryColor= ${props.secondaryColor}
                        style = ${Type.isArray(props.style) ? Array.join(Array.filter(props.style, item => !!item), ';') : props.style}
                        @process {
                            filter = ${Array.filter(value, item => !!item)}
                            toString = ${Array.isEmpty(value) ? null : Array.join(value, ';')}
                            removeDoubleSemicolons = ${String.replace(value, ';;', ';')}
                        }
                    }
                }
            }
        }
        content = ${File.readFile(props.file)}
    }
}

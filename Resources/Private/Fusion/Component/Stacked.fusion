prototype(Garagist.Fontawesome:Component.Stacked) < prototype(Neos.Fusion:Component) {
    @propTypes {
        tagName = ${PropTypes.string.isRequired}
        size = ${PropTypes.oneOf(['2xs', 'xs', 'sm', 'lg', 'xl', '2xl', '1x', '2x', '3x', '4x', '5x', '6x', '7x', '8x', '9x', '10x', ''])}
        iconPrefix = ${PropTypes.string.isRequired}
    }

    @styleguide {
        title = 'Stacked Font Awesome Icons'
        description = 'Stack icons easily with the support styling bundled with Font Awesome.'
        props {
            size = '10x'
            background = Neos.Fusion:DataStructure {
                stackSize = 2
                style = 'solid'
                icon = 'circle'
            }
            foreground = Neos.Fusion:DataStructure {
                inverse = true
                stackSize = 1
                style = 'solid'
                icon = 'flag'
            }
        }
        useCases {
            colored {
                title = 'Colored, stacked icon'
                props {
                    size = '10x'
                    background = Neos.Fusion:DataStructure {
                        stackSize = 1
                        style = 'solid'
                        icon = 'camera'
                    }
                    foreground = Neos.Fusion:DataStructure {
                        stackSize = 2
                        style = 'solid'
                        icon = 'ban'
                        attributes = Neos.Fusion:DataStructure {
                            aria-hidden = 'true'
                            focusable = 'false'
                            role = 'img'
                            style = 'color:Tomato'
                        }
                    }
                }
            }
        }
    }

    tagName = 'span'
    size = null

    background = Neos.Fusion:DataStructure {
        stackSize = 2
    }
    foreground = Neos.Fusion:DataStructure {
        inverse = true
        stackSize = 1
    }

    attributes = Neos.Fusion:DataStructure {
        // Can be a string, array or a DataStructure
        style = null
        // Can be a string, array or a DataStructure
        class = null
    }

    // Internal
    iconPrefix = 'fa'
    @if.hasStackSize = ${this.background.stackSize && this.foreground.stackSize}

    renderer = Neos.Fusion:Tag {
        tagName = ${props.tagName}
        attributes = Neos.Fusion:DataStructure {
            @apply.props = ${props.attributes}
            @apply.class = Neos.Fusion:DataStructure {
                class = ${Carbon.String.merge(props.iconPrefix + '-stack', props.size ? props.iconPrefix + '-' + props.size : null, props.attributes.class)}
            }
        }
        content = afx`
            <Garagist.Fontawesome:Component.Icon @key='background' {...props.background} />
            <Garagist.Fontawesome:Component.Icon @key='foreground' {...props.foreground} />
        `
    }
}
